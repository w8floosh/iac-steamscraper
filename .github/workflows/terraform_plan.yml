name: "Dry run changes to SteamScraper IAC"
on: 
  push:
    branches:
      - main
      - staging
    paths: 
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env: 
  TF_CLOUD_ORGANIZATION: "steamscraper"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "iac-steamscraper"
  CONFIG_DIRECTORY: "./terraform"
  AWS_REGION: "us-east-1"
  EKS_CLUSTER: "steamscraper"

jobs:
  terraform:
    if: github.repository == 'w8floosh/iac-steamscraper'
    name: "Apply Terraform code changes"
    runs-on: ubuntu
    defaults:
      run:
        shell: bash        
        working-directory: ./terraform
    
    steps:
      - name: "Fetch infrastructure code"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup_terraform@v3
        
      - name: "Initialize Terraform environment"
        id: tf_init
        run: terraform init
        
      - name: "Format infrastructure code"
        id: tf_fmt
        run: terraform fmt -check
        
      # !!! IMPORTANT !!!
      - name: "Validate infrastructure code"
        id: tf_validate
        run: terraform validate
        
      - name: "Upload configuration to HCP Terraform"
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: config-upload
        with: 
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true
        
      # PLAN CHANGES
      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.config-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
            });
            const output = `#### HCP Terraform Plan Output
                \`\`\`
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });