name: "Apply changes to SteamScraper IAC"
permissions:
  id-token: write # This is required for requesting the JWT
on: 
  push:
    branches:
      - main
    paths: 
      - terraform/**
  workflow_dispatch:

env: 
  AWS_REGION: "us-east-1"
  AWS_ACCOUNT_ID: ${{secrets.AWS_ACCOUNT_ID}}
  EKS_CLUSTER: "steamscraper-eks"
  CERT_KEY: ${{secrets.CERT_KEY}}
  CERT_FILE: ${{secrets.CERT_FILE}}

jobs:
  terraform:
    if: github.repository == 'w8floosh/iac-steamscraper'
    name: "Apply Terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash        
        working-directory: ./terraform
    
    steps:
      - name: "Fetch infrastructure code"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_ARN}}
          role-session-name: steamscraper-actions
        
      - name: Terraform init
        id: init
        run: terraform init
      
      - name: Terraform format
        id: fmt
        run: terraform fmt
      
      - name: Terraform validate
        id: validate
        run: terraform validate
      
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true
      
      - name: Check plan status
        if: ${{steps.plan.outcome == 'failure'}}
        run: exit 1

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 tfplan
        continue-on-error: true

      - name: Destroy infrastructure if Terraform failed applying
        if: ${{steps.apply.outcome == 'failure'}}
        run: |
          terraform apply -refresh-only -auto-approve
          terraform apply -destroy -auto-approve
          exit 2

      - name: Update kubeconfig file
        id: kubeconfig-update
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{env.EKS_CLUSTER}}
        
      - name: Inject TLS certificates into Kubernetes cluster
        run: |
          echo "$CERT_KEY" > steamscraper.io.key
          echo "$CERT_FILE" > steamscraper.io.crt

          SECRET_NAME="tls-cert"
          KEY="steamscraper.io.key"
          CERT="steamscraper.io.crt"

          if ! kubectl get secret tls-cert >/dev/null 2>&1; then
            kubectl create secret tls $SECRET_NAME --key=$KEY --cert=$CERT
          else
            echo "Secret '$SECRET_NAME' already exists in namespace 'default'."
          fi

          rm steamscraper.io.key steamscraper.io.crt
      
      - name: Install NGINX Ingress Controller
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.1/deploy/static/provider/cloud/deploy.yaml

      - name: Update NGINX Ingress Controller Deployment
        run: |
          kubectl patch deployment ingress-nginx-controller -n ingress-nginx \
          --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--default-ssl-certificate=default/tls-cert"}]'

      - name: Restart NGINX Ingress Controller Deployment to apply new changes
        run: |
          kubectl rollout restart deployment ingress-nginx-controller -n ingress-nginx